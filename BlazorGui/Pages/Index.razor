@page "/"
@using AOC_2022;
@using System.Text;

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

<button class="btn btn-primary" @onclick="RunSolver">Run</button>

<p role="status">Answer: @answer</p>

<label for="liSolvers">Choose a Solver:</label>
<select name="lisolvers" id="lisolvers" @onchange="SolverHasChanged">

    @foreach (var solver in solvers)
    {
        <option value=@solver>@solver</option>
    }
         
   
</select>

<InputFile OnChange="@LoadFiles" />

@code {
    string solversText;// = "AOC_2022._20_01.Solver20_01";
    string filePath = "";//"C:\\Users\\benbu\\OneDrive\\Documents\\Aoc Input\\20_01.txt";
    string answer;
    Stream stream;

    List<string> solvers = new List<string>();

    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool isLoading;
    private string? message;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();
        message = string.Empty;

        if (e.FileCount > maxAllowedFiles)
        {
            message = $"Try again with no more than {maxAllowedFiles} files.";
        }
        else
        {
            foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
            {
                var trustedFileNameForFileStorage = Path.GetRandomFileName();
                var path = Path.Combine(Environment.ProcessPath,
                        Environment.UserDomainName, "unsafe_uploads",
                        trustedFileNameForFileStorage);
                await using FileStream fs = new(path, FileMode.Create);


                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
                loadedFiles.Add(file);

            }
        }


    }
    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        //stream = new FileStream(e.File, FileMode.Open, FileAccess.Read);

        //  stream = e.File.OpenReadStream();
        stream = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(stream);
    }

    private void SolverHasChanged(ChangeEventArgs args)
    {
        solversText = args.Value.ToString();
       
    }
    private void RunSolver()
    {
       
        
        var fact = new SolverFactory(solversText, filePath);

        var solver = fact.CreateSolver();

        answer = "Answer: " + solver.GetSolution(CreateStreamReader(filePath));
    }

    private StreamReader CreateStreamReader(string filePath)
    {
       // var fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read);

        var streamReader = new StreamReader(stream, Encoding.UTF8);

        return streamReader;
    }



    protected override async Task OnInitializedAsync()
    {
        solvers = GetSolvers();

    }

    public List<string> GetSolvers()
    {
        Type t = typeof(SolverRunner);
        SolverRunner runner = new SolverRunner();
        List<string> result = new List<string>();

        System.Reflection.Assembly assembly = System.Reflection.Assembly.GetAssembly(t);


        Type[] types = assembly.GetExportedTypes();
        foreach (Type type in types)
        {
            Type interfacetype = type.GetInterface("ISolver");
            if (interfacetype != null)
            {
                result.Add(FormatSolverName(type.ToString()));
            }
        }
        return result;

    }

    private string FormatSolverName(string solverName)
    {
        return solverName;
        var split = solverName.Split('.');
        return split.Last();
    }
}

